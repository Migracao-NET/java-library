name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Permitir execução do gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

      - name: Create SonarCloud Project (if not exists)
        run: |
          AUTH=$(echo "${{ secrets.SONAR_TOKEN }}:" | base64)
          ORG="migracao-net"
          PROJECT=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          NAME="${{ github.event.repository.name }}"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://sonarcloud.io/api/projects/create" \
            -H "Authorization: Basic $AUTH" \
            -d "organization=$ORG" \
            -d "project=$PROJECT" \
            -d "name=$NAME")

          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Projeto criado no SonarCloud."
          elif [ "$RESPONSE" = "400" ]; then
            echo "ℹ️ Projeto já existe no SonarCloud, seguindo..."
          else
            echo "❌ Falha ao criar projeto. Código HTTP: $RESPONSE"
            exit 1
          fi
        shell: bash

      - name: Definir chave do projeto Sonar
        run: echo "SONAR_PROJECT_KEY=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=migracao-net
            -Dsonar.projectKey=$SONAR_PROJECT_KEY
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.sources=src
            -Dsonar.tests=src/test
            -Dsonar.java.binaries=build/classes
            -Dsonar.verbose=true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs


    # deploy:
    #     runs-on: ubuntu-latest
    #     needs: build
          # permissions:
          #   contents: read
          #   packages: write
    #     steps:
    #       - uses: actions/checkout@v4
    #       - uses: actions/download-artifact@v4
    #         with:
    #           name: Package

    #       - name: Deploy to Server
    #         run: |
    #           echo "Deploying to server..."
    #           # Aqui você pode adicionar os comandos para fazer o deploy do seu aplicativo
    #           # Por exemplo, copiar os arquivos para um servidor remoto via SCP ou SFTP
    #           # ou usar uma ferramenta de deploy como Ansible, Capistrano, etc.
    #           echo "Deploy completed successfully!"
